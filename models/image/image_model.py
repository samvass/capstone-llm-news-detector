# -*- coding: utf-8 -*-
"""resnet18_image_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/samvass/capstone-model/blob/resnet-image/resnet18_image_model.ipynb
"""

import pandas as pd
import numpy as np
import torch
import torchvision.transforms as transforms
from torchvision import datasets, models
from torch.utils.data import DataLoader, random_split
import torch.nn as nn
import torch.optim as optim

ai_data = pd.read_csv('./ai_dataset.csv')
real_data = pd.read_csv('./real_dataset.csv')

ai_data = ai_data[['Title', 'Image', 'Label']]
real_data = real_data[['Title', 'Image', 'Label']]

# expecting ai_images, real_images to be in the ./datasets folder
transform = transforms.Compose([
    transforms.Resize(256),           # Resize so the smaller side is 256 pixels
    transforms.CenterCrop(224),       # Crop a 224x224 square from the center
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

dataset = datasets.ImageFolder(root='./datasets/', transform=transform)

train_size = int(0.8 * len(dataset))
val_size = int(0.1 * len(dataset))
test_size = len(dataset) - val_size - train_size

train_dataset, val_dataset, test_dataset = random_split(dataset, [train_size, val_size, test_size])

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

model = models.resnet18(pretrained=True)

num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, 1)

criterion = nn.BCEWithLogitsLoss()
optimizer = optim.Adam(model.fc.parameters(), lr=0.001)

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model.to(device)

num_epochs = 10
for epoch in range(num_epochs):
    model.train()
    train_loss = 0.0

    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(torch.squeeze(outputs), labels.float())
        loss.backward()
        optimizer.step()
        train_loss += loss.item()

    model.eval()

    val_loss = 0.0
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, labels in val_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(torch.squeeze(outputs), labels.float())  # Consistent with training
            val_loss += loss.item()

            predicted = torch.squeeze(torch.round(torch.sigmoid(outputs)))  # Sigmoid for probability
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
            print(predicted, labels, total, correct)

    train_loss /= len(train_loader)
    val_loss /= len(val_loader)
    accuracy = 100 * correct / total

    print(f'Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss:.4f}, Validation Loss: {val_loss:.4f}, Accuracy: {accuracy:.2f}%')

torch.save(model.state_dict(), 'fine_tuned_resnet18_model.pth')

test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

model.eval()  # Set the model to evaluation mode
test_loss = 0.0
correct = 0
total = 0

with torch.no_grad():
    for inputs, labels in test_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model(inputs)

        # Compute loss
        loss = criterion(torch.squeeze(outputs), labels.float())
        test_loss += loss.item()

        # Convert outputs to probabilities and then to predicted class (0 or 1)
        predicted = torch.squeeze(torch.round(torch.sigmoid(outputs)))
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

# Calculate average loss and accuracy
test_loss /= len(test_loader)
accuracy = 100 * correct / total

print(f'Test Loss: {test_loss:.4f}, Test Accuracy: {accuracy:.2f}%')

